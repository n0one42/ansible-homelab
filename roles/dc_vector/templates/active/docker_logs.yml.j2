sources:
# ! Logs
  # my_docker_file_logs:
  #   type: file
  #   include:
  #     # - /var/log/**/*.log
  #     - /opt/docker/logs/**/*.log

  my_docker_logs:
    type: docker_logs
    # include_containers:
    #   - "grafana"
    # include_labels: [] # It will only include containers containing these labels

transforms:
  remove_label:
    type: remap
    inputs:
      - my_docker_logs
    source: |
      message_parsed = 
        parse_json(.message) ??
        parse_logfmt(.message) ??
        parse_syslog(.message) ??
        parse_common_log(.message) ??
        null

      if message_parsed != null {
        .mp = message_parsed
      }

      .level, err = parse_regex(.message, r'(?i)\b(?P<level>error|warn|warning|info|debug|trace|critical|fatal)\b').level
      if err == null {
        .level = downcase(.level)
      }

      del(.highlight)
      del(.container_created_at)
      del(.image)
      del(.sort)
      del(.label."com.docker.compose.project") # ! This is needed for the docker_logs source except you remove all the labels
      del(.label."com.docker.compose.service")
      del(.label."com.docker.compose.project.config-files")
      del(.label."com.docker.compose.project.working_dir")
    # del(.label)


sinks:
  # console:
  #   inputs:
  #     - my_docker_file_logs
  #   type: console
  #   encoding:
  #     codec: json

  # elasticsearch:
  #   type: elasticsearch
  #   inputs:
  #     # - my_docker_logs
  #     - remove_label
  #     # - remove_label
  #     # - file_source # works
  #   endpoints: 
  #     - "http://{{ app_name }}-elasticsearch:9200"
  #   auth:
  #     strategy: basic
  #     user: elastic
  #     password: Temp#1234
  #   bulk:
  #     index: "docker-logs-%Y-%m-%d"
  #     # batch:
  #     #   max_bytes: 10485760  # 10MB
  #     #   timeout_secs: 1

  loki_docker_logs:
    type: loki
    inputs:
      - remove_label
    endpoint: "http://{{ dc_traefik_net_loki_ip }}:3100"
    encoding:
      codec: json # json
    labels:
      job: "vector-collector"
      job_type: "docker_logs"
      parser: vector
      host: "{{ ansible_hostname }}"  # eg: demo-vm20-metrics
      instance: "{{ ansible_hostname }}:3100"
{% raw %}
      container: "{{ .container_name }}"
      logstream: "{{ .stream }}"
      level: "{{ .level }}"
{% endraw %}
    # auth:
    #   strategy: basic
    #   user: "{{ dc_promtail_basic_auth_user }}"
    #   password: "{{ dc_promtail_basic_auth_password }}"
