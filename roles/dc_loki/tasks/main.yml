---
# tasks file for roles/dc_loki
# TODO: Variables which has to be passed through the playbook or on import of this task file
# ! Mandatory variables
  # vars:
  #   dc_postgresql_bitnami_parent_app_name: => traefik, portainer, grafana, netbox
# ? Optional variables

  # * --------------------------- App --------------------------- *
- name: Create loki for --> {{ dc_loki_parent_app_name }}
  vars:
    container_type: "loki" # => app, loki, redis
    user: "{{ (dc_loki_create_with_userns | bool) | ternary(dc_loki_u_g_id + 100000, dc_loki_u_g_id) }}"
    group: "{{ (dc_loki_create_with_userns | bool) | ternary(dc_loki_u_g_id + 100000, dc_loki_u_g_id) }}"
  block:
    - name: '[Required] filesystem_manager role'
      ansible.builtin.import_role:
        name: filesystem_manager
      vars:
        filesystem_manager_app_name: "{{ dc_loki_parent_app_name }}-loki"
        filesystem_manager_restart_container_on_template_change: true
        filesystem_manager_appdata_directories_to_create:
          - path: "data"
        filesystem_manager_appdata_templates_to_copy:
          - src: "loki-docker-config.yml.j2" # "{{ ansible_hostname }}/loki-docker-config.yml.j2"
            dest: "loki-docker-config.yml"
            mode: '0660'

    - name: Install docker compose loki with inline definition
      vars:
        docker_networks: >-
          {{
            {
              "traefik_net": {
                "name": dc_traefik_net.name,
                "external": true
              }
            }
            | combine(
              {
                "app_net": {
                  "name": dc_loki_parent_app_name ~ "_net",
                  "external": true
                }
              } if not dc_loki_standalone else {}
            )
          }}

        container_networks: >-
          {{
            {
              "traefik_net": {
                "ipv4_address": dc_traefik_net.loki_ip
              }
            }
            | combine(
              {
                "app_net": {
                  "ipv4_address": dc_loki_net_ip
                }
              } if not dc_loki_standalone else {}
            )
          }}


      community.docker.docker_compose_v2:
        project_name: "{{ dc_loki_parent_app_name }}-loki" # eg: grafana-loki
        definition:
          # ! --------------------------- Networks --------------------------- ! #
          networks: "{{ docker_networks }}"

          # * ---------------------------- App ------------------------------ * #
          services:
            loki:
              image: "{{ dc_loki_image }}"
              container_name: "{{ dc_loki_parent_app_name }}-loki"  # eg: grafana-loki, standalone-loki
              restart: unless-stopped
              security_opt:
                - no-new-privileges:true
              privileged: false
              userns_mode: "{{ 'host' if dc_loki_create_with_userns | bool == false else 'remap' }}"
              user: "{{ dc_loki_u_g_id }}:{{ dc_loki_u_g_id }}"
              command: -config.file=/etc/loki/local-config.yaml
              # command: -config.file=/etc/loki/local-config.yaml -log-config-reverse-order <-- if you want to output the entire config to logs
              networks: "{{ container_networks }}"
              # ports:
              #   - "{{ dc_loki_port }}:3100"
              volumes:
                - "{{ appdata_type_path }}/data:/loki"
                - "{{ appdata_type_path }}/loki-docker-config.yml:/etc/loki/local-config.yaml"
              # environment:
              labels:
                traefik.enable: "true"
                # * HTTP Router Without Authentication for Loki logs push (port 3100)
                traefik.http.routers.loki-rtr-noauth.entrypoints: "websecure"
                traefik.http.routers.loki-rtr-noauth.rule: >-
                  Host(`loki-{{ dc_traefik_type }}.{{ domain_1 }}`) &&
                  (
                  ClientIP(`{{ vm09_aio.ip }}/32`) ||
                  ClientIP(`{{ vm10_ingress.ip }}/32`) ||
                  ClientIP(`{{ vm31_application_1.ip }}/32`) ||
                  ClientIP(`{{ vm41_multimedia_1.ip }}/32`)
                  )
                traefik.http.routers.loki-rtr-noauth.middlewares: "chain-no-auth@file"
                traefik.http.routers.loki-rtr-noauth.service: "loki-svc"

                # * HTTP Router With Authentication for Loki (port 3100)
                traefik.http.routers.loki-rtr.entrypoints: "websecure"
                traefik.http.routers.loki-rtr.rule: "Host(`loki-{{ dc_traefik_type }}.{{ domain_1 }}`)"
                traefik.http.routers.loki-rtr.middlewares: "chain-authelia@file"
                traefik.http.routers.loki-rtr.service: "loki-svc"

                # * HTTP Service for Loki (port 3100)
                traefik.http.services.loki-svc.loadbalancer.server.port: "{{ dc_loki_port }}"


# ! --------------------------- Notes --------------------------- ! #
# https://github.com/grafana/loki/blob/main/cmd/loki/loki-docker-config.yaml
# https://grafana.com/docs/loki/latest/configure/examples/configuration-examples/

# http://10.0.90.20:3100/ready    # https://loki.your.dom/ready
# http://10.0.90.20:3100/metrics  # https://loki.your.dom/metrics
# http://10.0.90.20:3100/config   # https://loki.your.dom/config

# Cleaning
# sudo docker rm -f grafana-loki && sudo rm -r $APPDATA_DIR/grafana/loki
