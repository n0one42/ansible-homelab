---
- name: "Check if the VM already exists --> VM ID: {{ pve_vm_id }}"
  ansible.builtin.command:
    cmd: "qm status {{ pve_vm_id }}"
  register: vm_template_check
  changed_when: false
  failed_when: false

# - name: "Debug vm_template_check --> VM ID: {{ pve_vm_id }}"
#   ansible.builtin.debug:
#     msg: "{{ vm_template_check }}"

# ! cloudinit ide2 seems to be needed. The other parameters will be overridden by the cloudinit custom config
# ! sudo cloud-init schema --system

- name: Create VM Task
  when: "'does not exist' in vm_template_check.stderr"
  vars:
    pve_vm_user_data: "user=local:snippets/{{ pve_vm_id }}-user-data.yml"
    pve_vm_network_data: "network=local:snippets/{{ pve_vm_id }}-network-data.yml"
    pve_vm_meta_data: "meta=local:snippets/{{ pve_vm_id }}-meta-data.yml"
    pve_vm_cicustom: "{{ pve_vm_user_data }},{{ pve_vm_meta_data }},{{ pve_vm_network_data }}"
    # pve_vm_cicustom: "{{ pve_vm_user_data }},{{ pve_vm_meta_data }}"
  block:
    # - name: Ensure pve_automation directory for custom files exists
    #   ansible.builtin.file:
    #     path: "{{ pve_vm_automation_files_dir }}/{{ pve_vm_id }}"
    #     state: directory
    #     owner: root
    #     mode: '0700'

    # - name: Write public key to a file
    #   ansible.builtin.copy:
    #     content: "{{ pve_vm_primary_user_pub_key }}"
    #     dest: "{{ pve_vm_automation_files_dir }}/{{ pve_vm_id }}/primary_user.pub"
    #     owner: root
    #     mode: "0600"

    - name: Create VM {{ pve_vm_name }}
      ansible.builtin.shell: |
        qm create {{ pve_vm_id }} --name {{ pve_vm_name }} --ostype l26 &&
        qm set {{ pve_vm_id }} --bios=seabios --agent=1 --machine=q35 &&
        qm set {{ pve_vm_id }} --sockets {{ pve_vm_sockets }} --cores {{ pve_vm_cores }} --cpu host,flags=+aes &&
        qm set {{ pve_vm_id }} --memory {{ pve_vm_memory | default(2048) }} {{'--balloon' + pve_vm_balloon if pve_vm_balloon is defined else '--balloon 0' }} &&
        qm set {{ pve_vm_id }} --scsihw virtio-scsi-single &&
        qm set {{ pve_vm_id }} --scsi0 {{ pve_vm_storage }}:0,import-from="{{ pve_vm_image_destination }}/{{ pve_vm_image_url | basename }}",cache=writeback,ssd=1,discard=on,iothread=1 &&
        qm set {{ pve_vm_id }} --scsi1 {{ pve_vm_storage }}:cloudinit &&
        qm set {{ pve_vm_id }} --boot c --bootdisk scsi0 &&
        qm set {{ pve_vm_id }} --net0 virtio,bridge={{ pve_vm_bridge_0_name }}{{ ',macaddr=' + pve_vm_mac_address_0 if pve_vm_mac_address_0 is defined }},firewall=1 &&
        qm set {{ pve_vm_id }} --serial0 socket --vga serial0 &&
        qm disk resize {{ pve_vm_id }} scsi0 {{ pve_vm_disk_size }} &&
        qm set {{ pve_vm_id }} --agent enabled=1,fstrim_cloned_disks=1
      args:
        executable: /bin/bash
      register: pve_vm_create_output
      changed_when: true
        # qm set {{ pve_vm_id }} --ipconfig0 "ip={{ pve_vm_ipv4_address_0 }}/{{ pve_vm_net_prefix_length_0 }},gw={{ pve_vm_gateway_ip }}"
        # qm set {{ pve_vm_id }} --nameserver "{{ pve_vm_dns_server }}" --searchdomain {{ pve_vm_domain_name }}

    - name: Enable UEFI
      when: pve_vm_enable_uefi | default(true)
      ansible.builtin.shell: |
        qm set {{ pve_vm_id }} --bios=ovmf
        qm set {{ pve_vm_id }} --efidisk0 {{ pve_vm_storage }}:1,format=raw,efitype=4m,pre-enrolled-keys=0
      changed_when: true

    - name: Use templates to set cloud-init (user-data, meta-data, network-data)
      when: pve_vm_role_template_to_use is defined
      block:
        - name: Ensure snippets directory for custom configs exists
          ansible.builtin.file:
            path: /var/lib/vz/snippets # ! Must be snippets
            state: directory
            mode: '0755'

        # - name: Copy template files
        #   ansible.builtin.template:
        #     src: "{{ item.src }}"
        #     dest: "/var/lib/vz/snippets/{{ item.dest }}"
        #     mode: "0644"
        #   become: true
        #   loop:
        #     - src: "{{ pve_vm_role_template_to_use }}/user-data.yml.j2"
        #       dest: "{{ pve_vm_id }}-user-data.yml"
        #     - src: "{{ pve_vm_role_template_to_use }}/meta-data.yml.j2"
        #       dest: "{{ pve_vm_id }}-meta-data.yml"
        #     - src: "{{ pve_vm_role_template_to_use }}/network-data.yml.j2"
        #       dest: "{{ pve_vm_id }}-network-data.yml"

        # - name: Associate cloud-init user-data with VM
        #   ansible.builtin.command:
        #     cmd: 'qm set {{ pve_vm_id }} --cicustom "{{ pve_vm_cicustom }}"'
        #   become: true
        #   changed_when: false
        # qm set 9999 --cicustom "user=local:snippets/9999-user-data.yml,network=local:snippets/9999-network-data.yml,meta=local:snippets/9999-meta-data.yml"
        # qm start 9999
  always:
    - name: Display create vm output stderr_lines if fails
      ansible.builtin.debug:
        var: pve_vm_create_output.stderr_lines
      when: pve_vm_create_output is failed


        # qm set {{ pve_vm_id }} --ciuser {{ pve_vm_primary_user_name }}
        # qm set {{ pve_vm_id }} --sshkeys "/tmp/{{ pve_vm_id }}_primary_user.pub"
