---
- name: Create Traefik & Socket Proxy
  vars:
    app_name: "{{ dc_traefik_container_name }}" # "traefik"
    traefik_crowdsec_bouncer_key: "{{ dc_traefik_crowdsec_bouncer_key }}" # ! MUST BE HERE BECAUSE SHARED !
  block:
  # * ------------------------ Traefik Network ------------------------ * #
    - name: Include Traefik Network
      ansible.builtin.import_role:
        name: dn_traefik_net

  # * ------------------------ CrowdSec ------------------------ * #
    - name: Include crowdsec role
      ansible.builtin.import_role:
        name: dc_crowdsec
      when: dc_traefik_crowdsec_enabled

  # * ------------------------ Socket Proxy ------------------------ * #
    - name: Include Socket Proxy role
      ansible.builtin.import_role:
        name: dc_socketproxy
      vars:
        dc_socketproxy_env_log_level: "{{ dc_traefik_socketproxy_env_log_level }}"
        dc_socketproxy_env_containers: "{{ dc_traefik_socketproxy_env_containers }}"
        dc_socketproxy_net_subnet: "{{ dc_traefik_socketproxy_net.subnet }}"
        dc_socketproxy_net_ip: "{{ dc_traefik_socketproxy_net.socketproxy_ip }}"

  # * ----------------------- Traefik App ------------------------- * #
    - name: Create app
      vars:
        container_type: "app" # => app, db, redis
        user: "{{ (dc_traefik_create_with_userns | bool) | ternary(dc_traefik_u_g_id + 100000, dc_traefik_u_g_id) }}"
        group: "{{ (dc_traefik_create_with_userns | bool) | ternary(dc_traefik_u_g_id + 100000, dc_traefik_u_g_id) }}"
      block:
        - name: '[Required] filesystem_manager role'
          ansible.builtin.import_role:
            name: filesystem_manager
          vars:
            filesystem_manager_restart_container_on_template_change: true
            filesystem_manager_appdata_directories_to_create:
              - path: "rules"
              - path: "letsencrypt"
              - path: "plugins-storage"
            filesystem_manager_appdata_files_to_touch:
              - filename: "letsencrypt/acme.json"
                mode: "0600"
            filesystem_manager_log_files_to_touch:
              - filename: "traefik.log"
              - filename: "access.log"
            filesystem_manager_appdata_templates_in_directory_to_copy:
              - src: "{{ playbook_dir | dirname }}/roles/dc_traefik/templates/shared"
                dest: "rules"
              - src: "{{ playbook_dir | dirname }}/roles/dc_traefik/templates/{{ dc_traefik_type }}"
                dest: "rules"
            filesystem_manager_secret_files_to_create:
              - var_name: "basic_auth_credentials"
                content: "{{ dc_traefik_basic_auth_user }}:{{ dc_traefik_basic_auth_password_hashed }}"
                mode: "0440"
              - var_name: "dc_traefik_cf_dns_api_token"
                content: "{{ dc_traefik_cf_dns_api_token }}" # pass it from the ansible vault
                mode: "0440"
            filesystem_manager_appdata_templates_to_copy:
              - src: "traefik.yml.j2"
                dest: "traefik.yml"

        - name: '[Required] filesystem_manager role'
          ansible.builtin.import_role:
            name: filesystem_manager
          vars:
            filesystem_manager_secret_files_to_create:
              - var_name: "traefik_crowdsec_bouncer_key"
                content: "{{ traefik_crowdsec_bouncer_key | default('') }}"
                set_facts: true  # optional - needed for the app
                # override_existing: true  # optional
          when: dc_traefik_crowdsec_enabled | bool

        - name: Install docker compose traefik with inline definition
          vars:
            docker_networks: >-
              {{
                {
                  "traefik_net": {
                    "name": dc_traefik_net.name,
                    "external": true
                  },
                  "socketproxy_net": {
                    "name": app_name ~ "_socketproxy_net",
                    "external": true
                  }
                }
                | combine(
                  {
                    "crowdsec_net": {
                      "name": dc_crowdsec_net.name,
                      "external": true
                    }
                  }
                  if dc_traefik_crowdsec_enabled else {}
                )
              }}

          community.docker.docker_compose_v2:
            project_name: "{{ app_name }}"
            definition:
              # ! --------------------------- Networks --------------------------- ! #
              networks: "{{ docker_networks }}"


              # * ---------------------------- App ------------------------------ * #
              services:
                traefik:
                  container_name: "{{ app_name }}"  # eg: traefik
                  image: traefik:{{ dc_traefik_image_version }}
                  # profiles: ["core", "all"] # ! seams not to work here
                  restart: always
                  # read_only: true # needs to rewrite the acme and such
                  security_opt:
                    - no-new-privileges:true
                  privileged: false
                  userns_mode: "{{ 'host' if dc_traefik_create_with_userns | bool == false else 'remap' }}"
                  user: "{{ dc_traefik_u_g_id }}:{{ dc_traefik_u_g_id }}"
                  command: # CLI arguments # ? decided to use traefik.yml instead
                    - --configFile=/etc/traefik/traefik.yml
                  extra_hosts:
                    - "authelia.{{ domain_1 }}:{{ vm10_ingress.ip }}"
                    - "authentik.{{ domain_1 }}:{{ vm10_ingress.ip }}"
                    # # Just rly needed if using both traefiks together
                    # - "traefik-ingress.{{ domain_1 }}:{{ vm10_ingress.ip }}"  # Yes, this is correct!
                    # - "traefik-metrics.{{ domain_1 }}:{{ vm20_metrics.ip }}"  # Yes, this is correct!
                  networks:
                    traefik_net: # "{{ {'ipv4_address': dc_traefik_net.traefik_ip} if dc_traefik_net.traefik_ip is defined and dc_traefik_net.traefik_ip | length > 0 else {} }}"
                      ipv4_address: "{{ dc_traefik_net.traefik_ip }}"
                    socketproxy_net: # "{{ {'ipv4_address': dc_traefik_socketproxy_net.traefik_ip} if dc_traefik_socketproxy_net.socketproxy_ip is defined and dc_traefik_socketproxy_net.traefik_ip | length > 0 else {} }}"
                      ipv4_address: "{{ dc_traefik_socketproxy_net.traefik_ip }}"
                    crowdsec_net: # "{{ {'ipv4_address': dc_crowdsec_net.traefik_ip} if dc_crowdsec_net.traefik_ip is defined and dc_crowdsec_net.traefik_ip | length > 0 and dc_traefik_crowdsec_enabled | default(false) | bool else omit }}"
                      ipv4_address: "{{ dc_crowdsec_net.traefik_ip }}"
                  ports:
                    - target: 80
                      published: 80
                      protocol: tcp
                      mode: host
                    - target: 443
                      published: 443
                      protocol: tcp
                      mode: host
                    - target: 8080 # need to enable --api.insecure=true
                      published: 8080
                      protocol: tcp
                      mode: host
                  volumes:
                    # - /var/run/docker.sock:/var/run/docker.sock:ro # Enable if not using Socket Proxy
                    - "{{ appdata_type_path }}/traefik.yml:/etc/traefik/traefik.yml"
                    - "{{ appdata_type_path }}/rules:/rules" # Dynamic File Provider directory
                    - "{{ appdata_type_path }}/plugins-storage:/plugins-storage"
                    # - "{{ appdata_type_path }}/acme.json:/acme.json" # Certs File
                    - "{{ appdata_type_path }}/letsencrypt:/letsencrypt" # Certs Files
                    - "{{ logs_type_path }}:/logs" # Traefik logs
                    - "{{ secrets_type_path }}:/run/secrets"
                  environment:
                    TZ: "{{ timezone }}"
                    CF_DNS_API_TOKEN_FILE: /run/secrets/dc_traefik_cf_dns_api_token
                  labels:
                    # - autoheal: "true"
                    traefik.enable: "true"
                    # * Healthcheck/ping
                    # - "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME_HS`) && Path(`/ping`)"
                    # - "traefik.http.routers.ping.tls=true"
                    # - "traefik.http.routers.ping.service=ping@internal"
                    # * HTTP Routers
                    traefik.http.routers.traefik-rtr.entrypoints: "websecure"
                    traefik.http.routers.traefik-rtr.rule: "Host(`{{ app_name }}-{{ dc_traefik_type }}{{ '' if env == 'prod' else '.' + env }}.{{ domain_1 }}`)"
                    # * Services - API
                    traefik.http.routers.traefik-rtr.service: "api@internal"
                    # * Middlewares
                    # traefik.http.routers.traefik-rtr.middlewares: "chain-no-auth@file" # For No Authentication
                    # traefik.http.routers.traefik-rtr.middlewares: "chain-basic-auth@file" # For Basic HTTP Authentication
                    # traefik.http.routers.traefik-rtr.middlewares: "chain-oauth@file" # For Google OAuth
                    traefik.http.routers.traefik-rtr.middlewares: "chain-authelia@file" # For Authelia Authentication
                    # traefik.http.routers.traefik-rtr.middlewares: "chain-authentik@file" # For Authentik Authentication
                    # traefik.http.routers.traefik-rtr.middlewares: "{{ 'chain-authelia@file' if dc_traefik_type == 'ingress' else 'chain-basic-auth@file' }}"


                # traefik-certs-dumper:
                #   container_name: "{{ app_name }}-certs-dumper"
                #   image: ldez/traefik-certs-dumper:v2.8.3
                #   restart: unless-stopped
                #   # read_only: true # needs to rewrite the acme and such
                #   security_opt:
                #     - no-new-privileges:true
                #   privileged: false
                #   entrypoint: sh -c '
                #     apk add jq
                #     ; while ! [ -e /data/acme.json ]
                #     || ! [ `jq ".[] | .Certificates | length" /data/acme.json` != 0 ]; do
                #     sleep 1
                #     ; done
                #     && traefik-certs-dumper file --domain-subdir=true
                #     --version v2 --watch
                #     --source /data/acme.json --dest /certs_dumper'
                #   networks:
                #     traefik_net: "{{ {'ipv4_address': dc_traefik_net_cert_dumper_ip} if dc_traefik_net_cert_dumper_ip is defined and dc_traefik_net_cert_dumper_ip | length > 0 else {} }}"
                #   volumes:
                #     - "{{ appdata_type_path }}/letsencrypt:/data"
                #     - "{{ docker_secrets }}/certs_dumper:/certs_dumper"


# ! Notes
# something like the following line causes problems in traefik. Therefore I think, it would be better not to use this anymore this way despite the container.
# - "{{ '--certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory' if dc_traefik_acme_staging_mode | bool else '' }}"
