---
# tasks file for roles/dc_telegraf
# TODO: Variables which has to be passed through the playbook or on import of this task file
# ! Mandatory variables
  # vars:
  #   app_name: => traefik, portainer, grafana, netbox
# ? Optional variables

- name: Create Telegraf & Socket Proxy
  block:
    - name: Set facts app_name for Telegraf standalone
      ansible.builtin.set_fact:
        app_name: "standalone"
      when: dc_telegraf_standalone | default(false)

  # * ------------------------ Socket Proxy ------------------------ * #
    - name: Include Socket Proxy role
      ansible.builtin.import_role:
        name: dc_socketproxy
      vars:
        dc_socketproxy_container_name: "{{ app_name }}-telegraf"
        dc_socketproxy_net_cidr: "{{ dc_telegraf_socketproxy_net_cidr }}"
        dc_socketproxy_net_ip: "{{ dc_telegraf_socketproxy_net_ip }}"

        dc_socketproxy_env_log_level: "{{ dc_telegraf_socketproxy_env_log_level }}"
        dc_socketproxy_env_containers: "{{ dc_telegraf_socketproxy_env_containers }}"
        dc_socketproxy_env_networks: "{{ dc_telegraf_socketproxy_env_networks }}"
        dc_socketproxy_env_nodes: "{{ dc_telegraf_socketproxy_env_nodes }}"
        dc_socketproxy_env_services: "{{ dc_telegraf_socketproxy_env_services }}"
        dc_socketproxy_env_tasks: "{{ dc_telegraf_socketproxy_env_tasks }}"

  # * --------------------------- App --------------------------- *
    - name: Create telegraf for --> {{ app_name }}
      vars:
        container_type: "telegraf" # => app, db, redis, loki, telegraf
        user: "{{ (dc_telegraf_create_with_userns | bool) | ternary(dc_telegraf_u_g_id + 100000, dc_telegraf_u_g_id) }}"
        group: "{{ (dc_telegraf_create_with_userns | bool) | ternary(dc_telegraf_u_g_id + 100000, dc_telegraf_u_g_id) }}"
      block:
        - name: '[Required] filesystem_manager role'
          ansible.builtin.import_role:
            name: filesystem_manager
          vars:
            filesystem_manager_appdata_templates_to_copy:
              - src: "telegraf.conf.j2"
                dest: "telegraf.conf"
            filesystem_manager_give_full_read_access_to_path:
              - path: "{{ docker_logs }}"
              - path: /var/log

        - name: Install docker compose telegraf with inline definition
          vars:
            docker_networks: >-
              {{
                {
                  "traefik_net": {
                    "name": dc_traefik_net_name,
                    "external": true
                  },
                  "socketproxy_net": {
                    "name": app_name ~ "-telegraf_socketproxy_net",
                    "external": true
                  }
                }
                | combine(
                  {
                    "app_net": {
                      "name": app_name ~ "_net",
                      "external": true
                    }
                  } if not dc_telegraf_standalone else {}
                )
              }}

          community.docker.docker_compose_v2:
            project_name: "{{ app_name }}-telegraf" # eg: grafana-telegraf
            definition:
              # ! --------------------------- Networks --------------------------- ! #
              networks: "{{ docker_networks }}"


              # * ---------------------------- App ------------------------------ * #
              services:
                telegraf:
                  image: docker.io/telegraf:{{ dc_telegraf_image_version }}
                  container_name: "{{ app_name }}-telegraf"  # eg: grafana-telegraf
                  restart: unless-stopped
                  security_opt:
                    - no-new-privileges:true
                  privileged: false
                  userns_mode: "{{ 'host' if dc_telegraf_create_with_userns | bool == false else 'remap' }}"
                  user: "{{ dc_telegraf_u_g_id }}:{{ dc_telegraf_u_g_id }}"
                  # command:
                  extra_hosts:
                    - "loki-metrics.{{ domain_1 }}:{{ dc_telegraf_loki_traefik_ip | default('127.0.0.1') }}"  # Has to be the internal ip of the traefik where loki is running
                  networks:
                    app_net: "{{ {'ipv4_address': dc_telegraf_net_ip} if dc_telegraf_net_ip is defined and dc_telegraf_net_ip | length > 0 and not dc_telegraf_standalone | default(false) | bool else omit }}"
                    socketproxy_net: "{{ {'ipv4_address': dc_telegraf_socketproxy_net_app_ip} if dc_telegraf_socketproxy_net_app_ip is defined and dc_telegraf_socketproxy_net_app_ip | length > 0 else {} }}"
                    traefik_net: "{{ {'ipv4_address': dc_traefik_net_telegraf_ip} if dc_traefik_net_telegraf_ip is defined and dc_traefik_net_telegraf_ip | length > 0 else {} }}"
                  # ports:
                  #   - "{{ dc_telegraf_port }}:8125"
                  volumes:
                    - "{{ appdata_type_path }}/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
                    - /sys/fs/cgroup:/sys/fs/cgroup:ro
                    - /proc:/rootfs/proc:ro
                    - /sys:/rootfs/sys:ro
                    - /var/log:/var/log:ro
                    - /opt/docker/logs:/opt/docker/logs:ro
                  environment:
                    - HOST_PROC=/rootfs/proc
                    - HOST_SYS=/rootfs/sys
                    - HOST_ETC=/rootfs/etc


# ! --------------------------- Notes --------------------------- ! #
# Depending on the logs wanted, it is best to use this container as root. Since this will not be exposed, this should be acceptable.
# Actually it is using a non root user. With read permissions to the logs using filesystem_manager_give_full_read_access_to_path

# Summary of Differences:

# 	•	File Reading Mode:
# 	•	inputs.file reads the entire file at once.
# 	•	inputs.tail reads the file incrementally, following new lines as they are added.
# 	•	Use Case:
# 	•	inputs.file is best for static or infrequently changing files.
# 	•	inputs.tail is best for dynamically growing files, such as logs.
# 	•	Efficiency:
# 	•	inputs.tail is more efficient for large files, as it doesn’t need to re-read the entire file after each update.

# Choosing Between Them:

# 	•	If you need to monitor a log file or any file that is constantly updated, use inputs.tail.
# 	•	If you need to process a complete file each time, especially for static files or those that are updated all at once, use inputs.file.

# cleaning:
# sudo docker container rm -f grafana-telegraf grafana-telegraf-socketproxy
# sudo docker network rm grafana-telegraf_socketproxy_net
# sudo rm -r $APPDATA_DIR/grafana/telegraf
