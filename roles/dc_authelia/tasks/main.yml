---
# tasks file for roles/dc_authelia
- name: Create Authelia with PostgreSQL and Redis
  vars:
    app_name: "{{ dc_authelia_container_name }}" # "authelia"
    db_name: "{{ dc_authelia_db_name }}" # "authelia"
    db_user_name: "{{ dc_authelia_db_user_name }}" # "authelia"
    db_user_pw: "{{ dc_authelia_db_user_pw }}"  # ! MUST BE HERE BECAUSE SHARED !
    db_port: "{{ dc_authelia_db_port }}" # "5432"
    redis_pw: "{{ dc_authelia_redis_pw }}"  # ! MUST BE HERE BECAUSE SHARED!
    redis_port: "{{ dc_authelia_redis_port }}" # "6379"
  block:
  # ! --------------------------- Networks --------------------------- ! #
    - name: Create network for --> {{ app_name }}
      community.docker.docker_network:
        name: "{{ app_name }}_net"
        driver: bridge
        internal: true
        ipam_config:
          - subnet: "{{ dc_authelia_net_cidr }}"
      when: not dc_authelia_use_sqlite

  # * ------------------------ Authelia DB ------------------------ * #
    - name: Include postgresql role
      ansible.builtin.import_role:
        name: dc_postgresql_bitnami
      vars:
        dc_postgresql_bitnami_create_with_userns: "{{ dc_authelia_db_create_with_userns }}"
        dc_postgresql_bitnami_image_version: "{{ dc_authelia_db_image_version }}"
        dc_postgresql_bitnami_db_superuser_pw: "{{ dc_authelia_db_superuser_pw }}"
        dc_postgresql_bitnami_db_name: "{{ dc_authelia_db_name }}"
        dc_postgresql_bitnami_db_user_name: "{{ dc_authelia_db_user_name }}"
        dc_postgresql_bitnami_db_port: "{{ dc_authelia_db_port }}"
        dc_postgresql_bitnami_net_ip: "{{ dc_authelia_net_db_ip }}"
      when: not dc_authelia_use_sqlite


  # * ------------------------ Authelia Redis ------------------------ * #
    - name: Include redis role
      ansible.builtin.import_role:
        name: dc_redis_bitnami
      vars:
        dc_redis_bitnami_create_with_userns: "{{ dc_authelia_redis_create_with_userns }}"
        dc_redis_bitnami_image_version: "{{ dc_authelia_db_image_version }}"
        dc_redis_bitnami_redis_port: "{{ dc_authelia_redis_port }}"
        dc_redis_bitnami_net_ip: "{{ dc_authelia_net_redis_ip }}"
      when: not dc_authelia_use_sqlite

  # * ----------------------- Authelia App ------------------------- *
    - name: Create app --> {{ app_name }}
      vars:
        container_type: "app" # => app, db, redis
        user: "{{ (dc_authelia_create_with_userns | bool) | ternary(dc_authelia_u_g_id + 100000, dc_authelia_u_g_id) }}"
        group: "{{ (dc_authelia_create_with_userns | bool) | ternary(dc_authelia_u_g_id + 100000, dc_authelia_u_g_id) }}"
      block:
        - name: '[Required] filesystem_manager role'
          ansible.builtin.import_role:
            name: filesystem_manager
          vars:
            filesystem_manager_appdata_directories_to_create:
              - path: "config"
            # filesystem_manager_log_files_to_touch:
            #   - filename: "authelia.log"
            filesystem_manager_appdata_templates_to_copy:
              - src: "configuration.yml.j2"
                dest: "config/configuration.yml"
                mode: "0400"
              - src: "users.yml.j2"
                dest: "config/users.yml"
                mode: "0400"
            filesystem_manager_secret_files_to_create:
              - var_name: "authelia_jwt_secret"
                content: "{{ dc_authelia_jwt_secret }}"
                type: jwt_secret
              - var_name: authelia_storage_encryption_key
                content: "{{ dc_authelia_storage_encryption_key }}"
                type: storage_encryption_key
              - var_name: authelia_session_secret
                content: "{{ dc_authelia_session_secret }}"
                type: session_secret
          notify:
            - Restart authelia

        - name: '[Required] filesystem_manager role'
          ansible.builtin.import_role:
            name: filesystem_manager
          vars:
            filesystem_manager_secret_files_to_create:
              - var_name: redis_pw
                content: "{{ redis_pw }}"
              - var_name: db_user_pw
                content: "{{ db_user_pw }}"
          when: not dc_authelia_use_sqlite

        - name: Install docker compose authelia with inline definition
          vars:
            compose_networks: >-
              {{
                {
                  "traefik_net": {
                    "name": dc_traefik_net_name,
                    "external": true
                  },
                }
                | combine(
                  {
                    "app_net": {
                      "name": app_name ~ "_net",
                      "external": true
                    }
                  } if not dc_authelia_use_sqlite else {}
                )
              }}

            container_networks: >-
              {{
                {
                  "traefik_net": {
                    "ipv4_address": dc_traefik_net_authelia_ip if dc_traefik_net_authelia_ip is defined and dc_traefik_net_authelia_ip | length > 0 else {}
                  }
                }
                | combine(
                  {
                    "app_net": {
                      "ipv4_address": dc_authelia_net_app_ip if dc_authelia_net_app_ip is defined and dc_authelia_net_app_ip | length > 0 else {}
                    }
                  } if not dc_authelia_use_sqlite else {}
                )
              }}

          community.docker.docker_compose_v2:
            project_name: "{{ app_name }}"  # eg: authelia
            definition:
              # ! --------------------------- Networks --------------------------- ! #
              networks: "{{ compose_networks }}"

              # * ---------------------------- App ------------------------------ * #
              services:
                authelia:
                  image: authelia/authelia:{{ dc_authelia_image_version }}
                  container_name: "{{ app_name }}"  # eg: authelia
                  restart: always
                  security_opt:
                    - no-new-privileges:true
                  privileged: false
                  userns_mode: "{{ 'host' if dc_authelia_create_with_userns | bool == false else 'remap' }}"
                  user: "{{ dc_authelia_u_g_id }}:{{ dc_authelia_u_g_id }}"
                  networks: "{{ container_networks }}"
                  # ports:
                  #   - "{{ dc_authelia_port }}:9091"
                  volumes:
                    - "{{ appdata_type_path }}/config:/config"
                    # - "{{ logs_type_path }}/authelia.log:/config/authelia.log"
                    - "{{ secrets_type_path }}:/run/secrets"
                  environment: >-
                    {{
                      {
                        "TZ": timezone,
                        "AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE": "/run/secrets/authelia_jwt_secret",
                        "AUTHELIA_SESSION_SECRET_FILE": "/run/secrets/authelia_session_secret",
                        "AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE": "/run/secrets/authelia_storage_encryption_key"
                      }
                      | combine(
                        {
                          "AUTHELIA_SESSION_REDIS_PASSWORD_FILE": "/run/secrets/redis_pw",
                          "AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE": "/run/secrets/db_user_pw"
                        }
                        if not dc_authelia_use_sqlite else {}
                      )
                    }}
                  labels:
                    traefik.enable: "true"
                    ## HTTP Routers
                    traefik.http.routers.authelia-rtr.entrypoints: "websecure"
                    traefik.http.routers.authelia-rtr.rule: "Host(`{{ app_name }}.{{ domain_1 }}`)"
                    ## Middlewares
                    traefik.http.routers.authelia-rtr.middlewares: "chain-no-auth@file" # Has to be chain-no-auth
                    ## HTTP Services
                    traefik.http.routers.authelia-rtr.service: "authelia-svc"
                    traefik.http.services.authelia-svc.loadbalancer.server.port: "{{ dc_authelia_port }}"


        - name: Flush handlers
          ansible.builtin.meta: flush_handlers

# ! --------------------------- Notes --------------------------- ! #
# https://www.smarthomebeginner.com/authelia-docker-compose-guide-2024-v2/

# Cleaning
# sudo docker container rm -f authelia authelia-redis authelia-postgresql && sudo docker network rm authelia_net && sudo rm -r $APPDATA_DIR/authelia && sudo rm -r $SECRETS_DIR/authelia $LOGS_DIR/authelia
