---
# tasks file for roles/dc_grafana
- name: Create Grafana with Loki and Promtail
  vars:
    app_name: "{{ dc_grafana_container_name }}" # "grafana"
    db_name: "{{ dc_grafana_db_name }}" # "grafana"
    db_user_name: "{{ dc_grafana_db_user_name }}" # "grafana"
    db_user_pw: "{{ dc_grafana_db_user_pw }}"  # ! MUST BE HERE BECAUSE SHARED !
    db_port: "{{ dc_grafana_db_port }}" # "5432"
  block:
  # ! --------------------------- Networks --------------------------- ! #
    - name: Create network for --> {{ app_name }}
      community.docker.docker_network:
        name: "{{ app_name }}_net"
        driver: bridge
        internal: true
        ipam_config:
          - subnet: "{{ dc_grafana_net_cidr }}"


  # # * ------------------------ Grafana DB ------------------------ * #
  #   - name: Include postgresql role
  #     ansible.builtin.import_role:
  #       name: dc_postgresql_bitnami
  #     vars:
  #       dc_postgresql_bitnami_create_with_userns: "{{ dc_grafana_db_create_with_userns }}"
  #       dc_postgresql_bitnami_image_version: "{{ dc_grafana_db_image_version }}"
  #       dc_postgresql_bitnami_db_superuser_pw: "{{ dc_grafana_db_superuser_pw }}"
  #       dc_postgresql_bitnami_db_name: "{{ dc_grafana_db_name }}"
  #       dc_postgresql_bitnami_db_user_name: "{{ dc_grafana_db_user_name }}"
  #       dc_postgresql_bitnami_db_port: "{{ dc_grafana_db_port }}"
  #       dc_postgresql_bitnami_net_ip: "{{ dc_grafana_net_db_ip }}"


  # # * ------------------------ Grafana Loki ------------------------ * #
  #   - name: Include loki role
  #     ansible.builtin.import_role:
  #       name: dc_loki
  #     vars:
  #       dc_loki_create_with_userns: "{{ dc_grafana_loki_create_with_userns }}"
  #       dc_loki_image_version: "{{ dc_grafana_loki_image_version }}"
  #       dc_loki_net_ip: "{{ dc_grafana_net_loki_ip }}"
  #       dc_loki_port: "{{ dc_grafana_loki_port }}"


  # * ------------------------ Grafana Promtail ------------------------ * #
    - name: Include promtail role
      ansible.builtin.import_role:
        name: dc_promtail
      vars:
        dc_promtail_create_with_userns: "{{ dc_grafana_promtail_create_with_userns }}"
        dc_promtail_image_version: "{{ dc_grafana_promtail_image_version }}"
        dc_promtail_net_ip: "{{ dc_grafana_net_promtail_ip }}"
        dc_promtail_port: "{{ dc_grafana_promtail_port }}"


  # # * ------------------------ Grafana Node Exporter ------------------------ * #
  #   - name: Include node-exporter role
  #     ansible.builtin.import_role:
  #       name: dc_node-exporter
  #     vars:
  #       dc_nodeexporter_create_with_userns: "{{ dc_grafana_nodeexporter_create_with_userns }}"
  #       dc_nodeexporter_image_version: "{{ dc_grafana_nodeexporter_image_version }}"
  #       dc_nodeexporter_net_ip: "{{ dc_grafana_net_nodeexporter_ip }}"
  #       dc_nodeexporter_port: "{{ dc_grafana_nodeexporter_port }}"


  # # * ------------------------ Grafana Prometheus ------------------------ * #
  #   - name: Include prometheus role
  #     ansible.builtin.import_role:
  #       name: dc_prometheus
  #     vars:
  #       dc_prometheus_create_with_userns: "{{ dc_grafana_prometheus_create_with_userns }}"
  #       dc_prometheus_image_version: "{{ dc_grafana_prometheus_image_version }}"
  #       dc_prometheus_net_ip: "{{ dc_grafana_net_prometheus_ip }}"
  #       dc_prometheus_port: "{{ dc_grafana_prometheus_port }}"


  # * ----------------------- Grafana App ------------------------- *
    - name: Create app --> {{ app_name }}
      vars:
        container_type: "app" # => app, db, redis
        appdata_type_path: "{{ docker_appdata }}/{{ app_name }}/{{ container_type }}"
        secrets_type_path: "{{ docker_secrets }}/{{ app_name }}/{{ container_type }}"
        logs_type_path: "{{ docker_logs }}/{{ app_name }}/{{ container_type }}"
        user: "{{ (dc_grafana_create_with_userns | bool) | ternary(dc_grafana_u_g_id + 100000, dc_grafana_u_g_id) }}"
        group: "{{ (dc_grafana_create_with_userns | bool) | ternary(dc_grafana_u_g_id + 100000, dc_grafana_u_g_id) }}"
      block:
        - name: '[Required] dc_secrets_manager role'
          ansible.builtin.import_role:
            name: dc_secrets_manager
          vars:
            dc_secrets_manager_passwords_to_generate:
              - var_name: db_user_pw
                content: "{{ db_user_pw }}"
              - var_name: dc_grafana_admin_user
                content: "{{ dc_grafana_admin_user }}"
              - var_name: dc_grafana_admin_pw
                content: "{{ dc_grafana_admin_pw }}"

        - name: Include container_init role
          ansible.builtin.import_role:
            name: container_init
          vars:
            container_init_appdata_directories_to_create:
              - "data"


        - name: Install docker compose grafana with inline definition
          community.docker.docker_compose_v2:
            project_name: "{{ app_name }}"  # eg: grafana
            definition:
              # ! --------------------------- Networks --------------------------- ! #
              networks:
                app_net:
                  name: "{{ app_name }}_net"  # eg: grafana_net
                  external: true  # indicating that it's a pre-existing network not managed by this Docker Compose file.
                traefik_net:
                  name: "{{ dc_traefik_net_name }}"  # eg: traefik_net
                  external: true  # indicating that it's a pre-existing network not managed by this Docker Compose file.

              # * ---------------------------- App ------------------------------ * #
              services:
                grafana:
                  image: grafana/grafana:{{ dc_grafana_image_version }}
                  container_name: "{{ app_name }}"
                  restart: unless-stopped
                  security_opt:
                    - no-new-privileges:true
                  privileged: false
                  userns_mode: "{{ 'host' if dc_grafana_create_with_userns | bool == false else 'remap' }}"
                  user: "{{ dc_grafana_u_g_id }}:{{ dc_grafana_u_g_id }}"
                  networks:
                    app_net: "{{ {'ipv4_address': dc_grafana_net_app_ip} if dc_grafana_net_app_ip is defined and dc_grafana_net_app_ip | length > 0 else {} }}"
                    traefik_net: "{{ {'ipv4_address': dc_traefik_net_grafana_ip} if dc_traefik_net_grafana_ip is defined and dc_traefik_net_grafana_ip | length > 0 else {} }}"
                  ports:
                    - "{{ dc_grafana_port }}:3000"
                  volumes:
                    - "{{ appdata_type_path }}/data:/var/lib/grafana"
                    - "{{ secrets_type_path }}:/run/secrets"
                  environment:
                    GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
                    GF_PATHS_PROVISIONING: "/etc/grafana/provisioning"
                    GF_SECURITY_ADMIN_USER__FILE: "/run/secrets/dc_grafana_admin_user"
                    GF_SECURITY_ADMIN_PASSWORD__FILE: "/run/secrets/dc_grafana_admin_pw"

                    GF_DATABASE_TYPE: postgres
                    GF_DATABASE_HOST: "{{ dc_grafana_net_db_ip }}"
                    GF_DATABASE_PORT: "{{ db_port }}"
                    GF_DATABASE_NAME: "{{ db_name }}"
                    GF_DATABASE_USER: "{{ db_user_name }}"
                    GF_DATABASE_PASSWORD__FILE: "/run/secrets/db_user_pw"
                  labels:
                    traefik.enable: "true"
                    ## HTTP Routers
                    traefik.http.routers.grafana-rtr.entrypoints: "websecure"
                    traefik.http.routers.grafana-rtr.rule: "Host(`{{ app_name }}.{{ domain_1 }}`)"
                    ## Middlewares
                    traefik.http.routers.grafana-rtr.middlewares: "chain-no-auth@file"  # Has to be chain-no-auth
                    ## HTTP Services
                    traefik.http.routers.grafana-rtr.service: "grafana-svc"
                    traefik.http.services.grafana-svc.loadbalancer.server.port: "{{ dc_grafana_port }}"
                  entrypoint:
                    - sh
                    - -euc
                    - |
                      mkdir -p /etc/grafana/provisioning/datasources
                      cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
                      apiVersion: 1
                      datasources:
                      - name: Loki
                        type: loki
                        access: proxy
                        orgId: 1
                        url: http://{{ app_name }}-loki:{{ dc_grafana_loki_port }}
                        basicAuth: false
                        isDefault: true
                        version: 1
                        editable: false
                      - name: Prometheus
                        type: prometheus
                        access: proxy
                        orgId: 1
                        url: http://{{ app_name }}-prometheus:9090
                        basicAuth: false
                        isDefault: false
                        version: 1
                        editable: false
                      EOF
                      /run.sh


# Cleaning
# sudo docker container rm -f grafana-promtail grafana-loki grafana-prometheus grafana-nodeexporter grafana
# sudo docker container rm -f nginx-app
# sudo docker container rm -f grafana-postgresql && sudo docker network rm grafana_net && sudo rm -r $APPDATA_DIR/grafana && sudo rm -r $SECRETS_DIR/grafana

# https://grafana.com/docs/grafana/latest/administration/provisioning/
# https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/
# https://www.youtube.com/watch?v=AtxQHiFBn7k

# Promtail and Loki work together for log collection and aggregation, similar to how Node Exporter and Prometheus work together for metrics collection. Here's a breakdown of the equivalence:

#     Promtail ≈ Node Exporter
#         Promtail is to logs what Node Exporter is to metrics.
#         Promtail collects and forwards logs from the host system.
#         Node Exporter collects and exposes system-level metrics.
#     Loki ≈ Prometheus
#         Loki is to logs what Prometheus is to metrics.
#         Loki stores and indexes log data.
#         Prometheus scrapes and stores metric data.

# Key similarities:

#     Data Collection: Both pairs involve a component that collects data from the host system (Promtail for logs, Node Exporter for metrics).
#     Data Storage: Both have a central component that stores the collected data (Loki for logs, Prometheus for metrics).
#     Querying: Both Loki and Prometheus provide query languages for retrieving and analyzing their respective data types.
#     Integration with Grafana: Both Loki and Prometheus integrate well with Grafana for visualization.

# Key differences:

#     Data Type: Promtail/Loki handle log data, while Node Exporter/Prometheus handle metric data.
#     Collection Method: Promtail typically reads log files, while Node Exporter exposes metrics that Prometheus scrapes.
#     Indexing: Loki uses a label-based index for logs, while Prometheus uses a time-series database for metrics.

# In your setup, you would typically have:

#     Promtail on vm1 to collect logs
#     Node Exporter on vm1 to expose metrics
#     Loki on vm2 to receive and store logs from Promtail
#     Prometheus on vm2 to scrape and store metrics from Node Exporter
